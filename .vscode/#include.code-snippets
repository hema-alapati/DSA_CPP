{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  
	"Boiler Plate Standard": {
	  "prefix": "code",
	  "body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"",
		"#define fast ios_base::sync_with_stdio(false);cin.tie(0);",
		"#define vi vector<int>",
		"#define pii pair<int, int>",
		"#define vvi vector<vector<int>>",
		"#define vpii vector<pair<int,int>>",
		"#define loop(i,a,b) for(int i = a; i < b; i++)",
		"#define mp unordered_map<int,int>",
		"#define MAX INT_MAX",
		"#define MIN INT_MIN",
		"",
		"template <typename T>",
		"void print(T arr)",
		"{",
		"    for (auto i : arr)",
		"    {",
		"        cout << i << ' ';",
		"    }",
		"    cout << endl;",
		"}",
		"",
		"",
		"int main()",
		"{",
		"",
		"    return 0;",
		"}",
	  ],
	  "description": "BoilerPlate Code"
	}
  }