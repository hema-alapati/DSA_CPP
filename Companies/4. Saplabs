ques1: 
A company manufactures different types of software products. They deliver their products to their N clients. Whenever the company fulfills the complete order of a client, the orderlD generated is the concatenation of the number of products delivered for every committed product type. The head of the sales team wishes to find the clientwise data for the total number of products of any type delivered to every client.
Write an algorithm for the head of sales team to calculate the total number of products of any type delivered to the respective clients.
Input
The first line of the input consists of an integer numOfClients, representing the number of clients (N).
The second line consists of N space-separated integers - orderlDs orderlD., orderlDw., representing the orderiDs of
the orders delivered to the clients
Output
Print N space-seperated integers representing the clientwise data for the total number of products of any type delivered to each of the respective clients.

 #include <iostream>
#include <vector>

using namespace std;

vector<int> calculate_total_products(int num_of_clients, vector<int>& order_ids) {
    vector<int> clientwise_data;

    for (int i = 0; i < num_of_clients; ++i) {
        int total_products = 0;
        int order_id = order_ids[i];
        string order_str = to_string(order_id);

        for (char digit : order_str) {
            total_products += digit - '0';
        }

        clientwise_data.push_back(total_products);
    }

    return clientwise_data;
}

int main() {
    int num_of_clients;
    cin >> num_of_clients;

    vector<int> order_ids(num_of_clients);
    for (int i = 0; i < num_of_clients; ++i) {
        cin >> order_ids[i];
    }

    vector<int> result = calculate_total_products(num_of_clients, order_ids);

    for (int i = 0; i < num_of_clients; ++i) {
        cout << result[i] << " ";
    }

    return 0;
}


q2:
Mr. Woods, an electrician for Timberland city, has made some faulty connections on eight street lights. 
The errors cause a street light to go OFF if the street lights adjacent to that light were both ON (represented as 1) or both OFF (represented as 0) on the previous night. 
Otherwise, the light will go ON as normal. The two street lights at the end of the road have only a single adjacent street light, so the light at the end can be assumed to 
be always OFF. The state of the lights on a particular day is considered for the following day, not for the same day.

Because of this fault, people are having difficulty driving on the road at night. 
They have filed a complaint with the Head of the Federal Highway Administration. Based on this complaint, the head has ordered a report of the state of street lights after M days.

Write an algorithm to output the state of the street lights after the given M days.

Input:
The first line of input consists of an integer - currentStateSize, representing the number of street lights (N).
The next line consists of N space-separated integers - currentState, representing the current state of the street lights (i.e., either 0 or 1).
The last line consists of an integer - days, representing the number of days (M).

Output:
Print N space-separated integers representing the state of the street lights after M days.

Constraints:
1 ≤ N ≤ 5
1 ≤ M ≤ 10^5

#include <iostream>
#include <vector>

using namespace std;

vector<int> calculate_street_lights_after_days(int current_state_size, vector<int>& current_state, int days) {
    for (int day = 0; day < days; ++day) {
        vector<int> new_state(current_state_size, 0);

        for (int i = 0; i < current_state_size; ++i) {
            // Check adjacent lights
            if (i == 0) {
                new_state[i] = current_state[i + 1];
            } else if (i == current_state_size - 1) {
                new_state[i] = current_state[i - 1];
            } else {
                new_state[i] = 1 - (current_state[i - 1] == current_state[i + 1]);
            }
        }

        current_state = new_state;
    }

    return current_state;
}

int main() {
    int current_state_size;
    cin >> current_state_size;

    vector<int> current_state(current_state_size);
    for (int i = 0; i < current_state_size; ++i) {
        cin >> current_state[i];
    }

    int days;
    cin >> days;

    vector<int> result = calculate_street_lights_after_days(current_state_size, current_state, days);

    for (int i = 0; i < current_state_size; ++i) {
        cout << result[i] << " ";
    }

    return 0;
}
